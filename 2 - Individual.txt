EscenariosController

using System.Data.Entity;
using System.Linq;
using System.Threading.Tasks;
using System.Web.Mvc;
using TuProyecto.Models; // Ajusta al namespace real

public class EscenariosController : Controller
{
    private readonly ApplicationDbContext _db = new ApplicationDbContext();

    // GET: Escenarios
    public async Task<ActionResult> Index()
    {
        var escenarios = await _db.Escenarios.ToListAsync();
        return View(escenarios);
    }

    // GET: Escenarios/Ejecutar/5
    public async Task<ActionResult> Ejecutar(int id)
    {
        var escenario = await _db.Escenarios.Include(e => e.Pasos).FirstOrDefaultAsync(e => e.EscenarioId == id);
        if (escenario == null)
            return HttpNotFound();

        // Crear registro de ejecución
        var ejecucion = new EscenarioEjecucion
        {
            EscenarioId = escenario.EscenarioId,
            EjecutadoPor = User.Identity.Name ?? "anon"
        };
        _db.Ejecuciones.Add(ejecucion);
        await _db.SaveChangesAsync();

        var motor = new MotorEscenarios();
        bool exitoGlobal = true;

        foreach (var paso in escenario.Pasos.OrderBy(p => p.Orden))
        {
            var resultado = await motor.EjecutarPasoAsync(new PasoEscenario
            {
                Id = paso.PasoId,
                EscenarioId = paso.EscenarioId,
                Orden = paso.Orden,
                TipoPaso = paso.TipoPaso,
                Parametros = paso.Parametros
            });

            _db.Resultados.Add(new EscenarioResultado
            {
                EjecucionId = ejecucion.EjecucionId,
                PasoId = paso.PasoId,
                Exito = resultado.Exito,
                Mensaje = resultado.Mensaje,
                Salida = resultado.Salida
            });

            if (!resultado.Exito)
            {
                exitoGlobal = false;
                break; // detener ejecución si falla
            }
        }

        ejecucion.Exito = exitoGlobal;
        ejecucion.MensajeResumen = exitoGlobal ? "Escenario ejecutado con éxito" : "Escenario fallido en un paso";
        await _db.SaveChangesAsync();

        return RedirectToAction("Resultados", new { id = ejecucion.EjecucionId });
    }

    // GET: Escenarios/Resultados/5
    public async Task<ActionResult> Resultados(int id)
    {
        var ejecucion = await _db.Ejecuciones
            .Include(e => e.Escenario)
            .FirstOrDefaultAsync(e => e.EjecucionId == id);

        if (ejecucion == null)
            return HttpNotFound();

        var resultados = await _db.Resultados
            .Include(r => r.Paso)
            .Where(r => r.EjecucionId == id)
            .OrderBy(r => r.Paso.Orden)
            .ToListAsync();

        ViewBag.Ejecucion = ejecucion;
        return View(resultados);
    }
}

----------------------------------------
Views/Escenarios/Index.cshtml


@model IEnumerable<TuProyecto.Models.Escenario>

@{
    ViewBag.Title = "Escenarios";
}

<h2>Escenarios disponibles</h2>

<table class="table table-bordered">
    <thead>
        <tr>
            <th>Nombre</th>
            <th>Descripción</th>
            <th>Acciones</th>
        </tr>
    </thead>
    <tbody>
    @foreach (var item in Model)
    {
        <tr>
            <td>@item.Nombre</td>
            <td>@item.Descripcion</td>
            <td>
                @Html.ActionLink("Ejecutar", "Ejecutar", new { id = item.EscenarioId }, new { @class = "btn btn-success btn-sm" })
            </td>
        </tr>
    }
    </tbody>
</table>

------------

@model IEnumerable<TuProyecto.Models.EscenarioResultado>
@{
    ViewBag.Title = "Resultados de ejecución";
    var ejecucion = ViewBag.Ejecucion as TuProyecto.Models.EscenarioEjecucion;
}

<h2>Resultados de ejecución</h2>

<p><strong>Escenario:</strong> @ejecucion.Escenario.Nombre</p>
<p><strong>Ejecutado por:</strong> @ejecucion.EjecutadoPor</p>
<p><strong>Fecha:</strong> @ejecucion.FechaEjecucion</p>
<p><strong>Resultado:</strong> @(ejecucion.Exito == true ? "✔ Éxito" : "❌ Falló")</p>
<hr />

<table class="table table-striped">
    <thead>
        <tr>
            <th>Paso</th>
            <th>Éxito</th>
            <th>Mensaje</th>
            <th>Salida</th>
        </tr>
    </thead>
    <tbody>
    @foreach (var r in Model)
    {
        <tr>
            <td>@r.Paso.Orden - @r.Paso.TipoPaso</td>
            <td>@(r.Exito ? "✔" : "❌")</td>
            <td>@r.Mensaje</td>
            <td><pre>@r.Salida</pre></td>
        </tr>
    }
    </tbody>
</table>

<p>
    @Html.ActionLink("Volver a Escenarios", "Index", "Escenarios", null, new { @class = "btn btn-primary" })
</p>
-----------
Clases del modelo (Entity Framework)


public class Escenario
{
    public int EscenarioId { get; set; }
    public string Nombre { get; set; }
    public string Descripcion { get; set; }
    public bool Activo { get; set; }
    public DateTime FechaCreacion { get; set; }
    public string CreadoPor { get; set; }

    public virtual ICollection<EscenarioPaso> Pasos { get; set; }
}

public class EscenarioPaso
{
    public int PasoId { get; set; }
    public int EscenarioId { get; set; }
    public int Orden { get; set; }
    public string TipoPaso { get; set; }
    public string Parametros { get; set; }
    public bool Activo { get; set; }

    public virtual Escenario Escenario { get; set; }
}

public class EscenarioEjecucion
{
    public int EjecucionId { get; set; }
    public int EscenarioId { get; set; }
    public string EjecutadoPor { get; set; }
    public DateTime FechaEjecucion { get; set; }
    public bool? Exito { get; set; }
    public string MensajeResumen { get; set; }

    public virtual Escenario Escenario { get; set; }
}

public class EscenarioResultado
{
    public int ResultadoId { get; set; }
    public int EjecucionId { get; set; }
    public int PasoId { get; set; }
    public bool Exito { get; set; }
    public string Mensaje { get; set; }
    public string Salida { get; set; }
    public DateTime FechaEjecucion { get; set; }

    public virtual EscenarioEjecucion Ejecucion { get; set; }
    public virtual EscenarioPaso Paso { get; set; }
}

